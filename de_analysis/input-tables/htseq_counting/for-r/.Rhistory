res_ordered<-res_genes_merged[order(res_genes_merged$padj),]
plot(log2(res_ordered$baseMean), res_ordered$log2FoldChange, col=ifelse(res_ordered$padj < 0.05,
"red","gray67"),main="MA plot (padj<0.05)", xlab = "Mean of normalized counts", ylab = "Log fold change", xlim=c(2,18),pch=20,cex=1,ylim=c(-7,7))
abline(h=c(-2,2), col="blue")
resSig = res_ordered[res_ordered$padj < 0.05, ]
resSig = resSig[resSig$log2FoldChange > 1 | resSig$log2FoldChange < -1,]
genes<-resSig$GeneID
mygenes <- resSig[,]
View(mygenes)
resSig = res_ordered[res_ordered$padj < 0.05, ]
resSig = resSig[resSig$log2FoldChange > 2 | resSig$log2FoldChange < -2,]
genes<-resSig$GeneID
mygenes <- resSig[,]
View(mygenes)
directory <- "/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/htseq_counts_tnseq/htseq_counts/"
sampleFiles_Serum <- grep("Serum",list.files(directory),value=TRUE)
sampleCondition_Serum <- sub("(.*Serum).*","\\1",sampleFiles_Serum)
sampleTable_Serum <- data.frame(sampleName = sampleFiles_Serum,
fileName = sampleFiles_Serum,
condition = sampleCondition_Serum)
sampleFiles_Human <- grep("HeatInactivated",list.files(directory),value=TRUE)
sampleCondition_Human <- sub("(.*HeatInactivated).*","\\1",sampleFiles_Human)
sampleTable_Human <- data.frame(sampleName = sampleFiles_Human,
fileName = sampleFiles_Human,
condition = sampleCondition_Human)
sampleFiles_BH <- grep("BH",list.files(directory),value=TRUE)
sampleCondition_BH <- sub("(.*BH).*","\\1",sampleFiles_BH)
sampleTable_BH <- data.frame(sampleName = sampleFiles_BH,
fileName = sampleFiles_BH,
condition = sampleCondition_BH)
sampleCondition <- c(sampleCondition_Serum, sampleCondition_BH)
sampleTable <- merge(sampleTable_BH, sampleTable_Serum, all=TRUE)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
keep <- rowSums(counts(ddsHTSeq)) >= 10
ddsHTSeq <- ddsHTSeq[keep,]
dds <- ddsHTSeq
# DE analysis
dds <- dds[, dds$condition %in% c("Serum","BH") ]
dds <- DESeq(dds)
res <- results(dds)
res
res <- results(dds, name="condition_Serum_vs_BH")
res <- results(dds, contrast=c("condition","Serum","BH"))
# Log fold change shrinkage for visualization and ranking
#biocLite("apeglm")
library(apeglm)
resultsNames(dds)
resLFC <- lfcShrink(dds, coef="condition_Serum_vs_BH", type="apeglm")
resOrdered <- resLFC[order(resLFC$padj),]
resOrdered
resOrdered <- res[order(res$log2FoldChange),]
summary(res)
sum(res$padj < 0.1, na.rm=TRUE)
res05 <- results(dds, alpha=0.05)
summary(res05)
summary(res05)
sum(res05$padj < 0.1, na.rm=TRUE)
plotMA(res, ylim=c(-9,9))
plotMA(resLFC, ylim=c(-10,10), main='MA plot', alpha=0.1)
# Since expression data is
rld <- rlog(dds)
resultsdds <- results(dds)
counts_table = counts( dds, normalized=TRUE )
filtered_norm_counts<-counts_table[!rowSums(counts_table==0)>=1, ]
filtered_norm_counts<-as.data.frame(filtered_norm_counts)
GeneID<-rownames(filtered_norm_counts)
filtered_norm_counts<-cbind(filtered_norm_counts,GeneID)
dim(filtered_norm_counts)
head(filtered_norm_counts)
res_ordered<-res[order(res$padj),]
GeneID<-rownames(res_ordered)
res_ordered<-as.data.frame(res_ordered)
res_genes<-cbind(res_ordered,GeneID)
dim(res_genes)
head(res_genes)
dim(res_genes)
res_genes_merged <- merge(res_genes,filtered_norm_counts,by=unique("GeneID"))
dim(res_genes_merged)
head(res_genes_merged)
res_ordered<-res_genes_merged[order(res_genes_merged$padj),]
plot(log2(res_ordered$baseMean), res_ordered$log2FoldChange, col=ifelse(res_ordered$padj < 0.05,
"red","gray67"),main="MA plot (padj<0.05)", xlab = "Mean of normalized counts", ylab = "Log fold change", xlim=c(2,18),pch=20,cex=1,ylim=c(-7,7))
abline(h=c(-2,2), col="blue")
resSig = res_ordered[res_ordered$padj < 0.05, ]
resSig = resSig[resSig$log2FoldChange > 2 | resSig$log2FoldChange < -2,]
genes<-resSig$GeneID
mygenes <- resSig[,]
View(mygenes)
directory <- "/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/htseq_counts_tnseq/htseq_counts/"
sampleFiles_Serum <- grep("Serum",list.files(directory),value=TRUE)
sampleCondition_Serum <- sub("(.*Serum).*","\\1",sampleFiles_Serum)
sampleTable_Serum <- data.frame(sampleName = sampleFiles_Serum,
fileName = sampleFiles_Serum,
condition = sampleCondition_Serum)
sampleFiles_Human <- grep("HeatInactivated",list.files(directory),value=TRUE)
sampleCondition_Human <- sub("(.*HeatInactivated).*","\\1",sampleFiles_Human)
sampleFiles_Serum <- grep("Serum",list.files(directory),value=TRUE)
sampleCondition_Serum <- sub("(.*Serum).*","\\1",sampleFiles_Serum)
sampleTable_Serum <- data.frame(sampleName = sampleFiles_Serum,
fileName = sampleFiles_Serum,
condition = sampleCondition_Serum)
sampleFiles_BH <- grep("BH",list.files(directory),value=TRUE)
sampleCondition_BH <- sub("(.*BH).*","\\1",sampleFiles_BH)
sampleTable_BH <- data.frame(sampleName = sampleFiles_BH,
fileName = sampleFiles_BH,
condition = sampleCondition_BH)
sampleCondition <- c(sampleCondition_Serum, sampleCondition_BH)
sampleTable <- merge(sampleTable_BH, sampleTable_Serum, all=TRUE)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
keep <- rowSums(counts(ddsHTSeq)) >= 10
ddsHTSeq <- ddsHTSeq[keep,]
dds <- ddsHTSeq
# DE analysis
dds <- dds[, dds$condition %in% c("Serum","BH") ]
dds <- DESeq(dds)
res <- results(dds)
res
res <- results(dds, name="condition_Serum_vs_BH")
res <- results(dds, contrast=c("condition","Serum","BH"))
# Log fold change shrinkage for visualization and ranking
#biocLite("apeglm")
library(apeglm)
resultsNames(dds)
resLFC <- lfcShrink(dds, coef="condition_Serum_vs_BH", type="apeglm")
resOrdered <- resLFC[order(resLFC$padj),]
resOrdered
resOrdered <- res[order(res$log2FoldChange),]
summary(res)
sum(res$padj < 0.05, na.rm=TRUE)
res
res$padj<0.05
save_it <- as.data.frame(res)
View(save_it)
###Load libraries
source("https://bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library(DESeq2)
library(ggplot2)
library(pheatmap)
directory <- "/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/htseq_counting/for-r/"
sampleFiles_Serum <- grep("Serum",list.files(directory),value=TRUE)
sampleCondition_Serum <- sub("(.*Serum).*","\\1",sampleFiles_Serum)
sampleTable_Serum <- data.frame(sampleName = sampleFiles_Serum,
fileName = sampleFiles_Serum,
condition = sampleCondition_Serum)
sampleFiles_BH <- grep("BH",list.files(directory),value=TRUE)
sampleCondition_BH <- sub("(.*BH).*","\\1",sampleFiles_BH)
sampleTable_BH <- data.frame(sampleName = sampleFiles_BH,
fileName = sampleFiles_BH,
condition = sampleCondition_BH)
sampleCondition <- c(sampleCondition_Serum, sampleCondition_BH)
sampleTable <- merge(sampleTable_BH, sampleTable_Serum, all=TRUE)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
#prefiltering
keep <- rowSums(counts(ddsHTSeq)) >= 10
ddsHTSeq <- ddsHTSeq[keep,]
dds <- ddsHTSeq
#Choosing the reference condition
dds$condition <- relevel(dds$condition, ref = "BH")
# DE analysis
dds <- dds[, dds$condition %in% c("Serum","BH") ]
dds <- DESeq(dds)
res <- results(dds)
res
res <- results(dds, name="condition_Serum_vs_BH")
res <- results(dds, contrast=c("condition","Serum","BH"))
# Log fold change shrinkage for visualization and ranking
#biocLite("apeglm")
library(apeglm)
resultsNames(dds)
resLFC <- lfcShrink(dds, coef="condition_Serum_vs_BH", type="apeglm")
resLFC
# p-values ordering
resOrdered <- res[order(-res$log2FoldChange),]
summary(res)
sum(res$padj < 0.1, na.rm=TRUE)
res05 <- results(dds, alpha=0.05)
summary(res05)
sum(res05$padj < 0.05, na.rm=TRUE)
#plots DE
plotMA(res, ylim=c(-9,9))
plotMA(resLFC, ylim=c(-9,9))
# plots counts
d <- plotCounts(dds, gene=which.min(res$padj), intgroup="condition",
returnData=TRUE)
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
# more results
mcols(res)$description
#save data
write.csv(as.data.frame(resOrdered),
file="condition_Serum_vs_BH_results.csv")
save_it <- as.data.frame(resOrdered)
write.csv(as.data.frame(save_it[1]),
file="condition_Serum_vs_BH_results.csv")
save_it[1]
# Create the report from the DESeq2 package,
DESeq2Report(dds = dds, intgroup = "condition")
# Since expression data is
rld <- rlog(dds)
resultsdds <- results(dds)
only_sign_dds_rlog <- subset(resultsdds, padj < 0.05)
#only_sign_dds_rlog <- subset(only_sign_dds_rlog, log2FoldChange < -2)
change_filter <- change_filter <- which(
abs(only_sign_dds_rlog$padj < 0.1) |
abs(only_sign_dds_rlog$padj < 0.1)
)
topVarGenes <- head(order(-rowVars(assay(rld))),20)
#topVarGenes <- topVarGenes[(topVarGenes %in% only_sign_dds_rlog$)]
mat = assay(rld)[ head(order(res$padj),20), ] # select the top 30 genes with the lowest padj
mat = mat - rowMeans(mat) # Subtract the row means from each value
df <- as.data.frame(colData(rld)[,"condition"])
colnames(mat) <- c("BH-1","BH-2","BH-3","Serum-1","Serum-2","Serum-3", "Serum-4")
colnames(df) <- "Condition"
rownames(df) <- colnames(mat)
pheatmap(mat, annotation_col=df)
directory <- "/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/htseq_counting/for-r/"
sampleFiles_Serum <- grep("Serum",list.files(directory),value=TRUE)
###Load libraries
source("https://bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library(DESeq2)
library(ggplot2)
library(pheatmap)
directory <- "/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/input-tables/htseq_counting/for-r"
sampleFiles_Serum <- grep("Serum",list.files(directory),value=TRUE)
sampleCondition_Serum <- sub("(.*Serum).*","\\1",sampleFiles_Serum)
sampleTable_Serum <- data.frame(sampleName = sampleFiles_Serum,
fileName = sampleFiles_Serum,
condition = sampleCondition_Serum)
sampleFiles_BH <- grep("BH",list.files(directory),value=TRUE)
sampleCondition_BH <- sub("(.*BH).*","\\1",sampleFiles_BH)
sampleTable_BH <- data.frame(sampleName = sampleFiles_BH,
fileName = sampleFiles_BH,
condition = sampleCondition_BH)
sampleCondition <- c(sampleCondition_Serum, sampleCondition_BH)
sampleTable <- merge(sampleTable_BH, sampleTable_Serum, all=TRUE)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
#prefiltering
keep <- rowSums(counts(ddsHTSeq)) >= 10
ddsHTSeq <- ddsHTSeq[keep,]
dds <- ddsHTSeq
#Choosing the reference condition
dds$condition <- relevel(dds$condition, ref = "BH")
# DE analysis
dds <- dds[, dds$condition %in% c("Serum","BH") ]
dds <- DESeq(dds)
res <- results(dds)
res
res <- results(dds, name="condition_Serum_vs_BH")
res <- results(dds, contrast=c("condition","Serum","BH"))
# Log fold change shrinkage for visualization and ranking
#biocLite("apeglm")
library(apeglm)
resultsNames(dds)
resLFC <- lfcShrink(dds, coef="condition_Serum_vs_BH", type="apeglm")
resLFC
# p-values ordering
resOrdered <- res[order(-res$log2FoldChange),]
summary(res)
sum(res$padj < 0.1, na.rm=TRUE)
res05 <- results(dds, alpha=0.05)
summary(res05)
sum(res05$padj < 0.05, na.rm=TRUE)
#plots DE
plotMA(res, ylim=c(-9,9))
plotMA(resLFC, ylim=c(-9,9))
# plots counts
d <- plotCounts(dds, gene=which.min(res$padj), intgroup="condition",
returnData=TRUE)
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
# more results
mcols(res)$description
#save data
write.csv(as.data.frame(resOrdered),
file="condition_Serum_vs_BH_results.csv")
save_it <- as.data.frame(resOrdered)
write.csv(as.data.frame(save_it[1]),
file="condition_Serum_vs_BH_results.csv")
save_it[1]
# Create the report from the DESeq2 package,
DESeq2Report(dds = dds, intgroup = "condition")
# Since expression data is
rld <- rlog(dds)
resultsdds <- results(dds)
only_sign_dds_rlog <- subset(resultsdds, padj < 0.05)
#only_sign_dds_rlog <- subset(only_sign_dds_rlog, log2FoldChange < -2)
change_filter <- change_filter <- which(
abs(only_sign_dds_rlog$padj < 0.1) |
abs(only_sign_dds_rlog$padj < 0.1)
)
topVarGenes <- head(order(-rowVars(assay(rld))),20)
#topVarGenes <- topVarGenes[(topVarGenes %in% only_sign_dds_rlog$)]
mat = assay(rld)[ head(order(res$padj),20), ] # select the top 30 genes with the lowest padj
mat = mat - rowMeans(mat) # Subtract the row means from each value
df <- as.data.frame(colData(rld)[,"condition"])
colnames(mat) <- c("BH-1","BH-2","BH-3","Serum-1","Serum-2","Serum-3", "Serum-4")
colnames(df) <- "Condition"
rownames(df) <- colnames(mat)
pheatmap(mat, annotation_col=df)
setwd("/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/input-tables/htseq_counting/for-r")
###Load libraries
source("https://bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library(DESeq2)
library(ggplot2)
library(pheatmap)
library(apeglm)
directory <- "/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/input-tables/htseq_counting/for-r"
setwd("/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/input-tables/htseq_counting/for-r")
sampleFiles_Serum <- grep("Serum",list.files(directory),value=TRUE)
sampleCondition_Serum <- sub("(.*Serum).*","\\1",sampleFiles_Serum)
sampleTable_Serum <- data.frame(sampleName = sampleFiles_Serum,
fileName = sampleFiles_Serum,
condition = sampleCondition_Serum)
sampleFiles_BH <- grep("BH",list.files(directory),value=TRUE)
sampleCondition_BH <- sub("(.*BH).*","\\1",sampleFiles_BH)
sampleTable_BH <- data.frame(sampleName = sampleFiles_BH,
fileName = sampleFiles_BH,
condition = sampleCondition_BH)
sampleCondition <- c(sampleCondition_Serum, sampleCondition_BH)
sampleTable <- merge(sampleTable_BH, sampleTable_Serum, all=TRUE)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
#prefiltering
keep <- rowSums(counts(ddsHTSeq)) >= 10
ddsHTSeq <- ddsHTSeq[keep,]
dds <- ddsHTSeq
#Choosing the reference condition
dds$condition <- relevel(dds$condition, ref = "BH")
# DE analysis
dds <- dds[, dds$condition %in% c("Serum","BH") ]
dds <- DESeq(dds)
res <- results(dds)
res
res <- results(dds, name="condition_Serum_vs_BH")
res <- results(dds, contrast=c("condition","Serum","BH"))
# Log fold change shrinkage for visualization and ranking
#biocLite("apeglm")
resultsNames(dds)
resLFC <- lfcShrink(dds, coef="condition_Serum_vs_BH", type="apeglm")
resLFC
# p-values ordering
resOrdered <- res[order(-res$log2FoldChange),]
summary(res)
sum(res$padj < 0.1, na.rm=TRUE)
res05 <- results(dds, alpha=0.05)
summary(res05)
sum(res05$padj < 0.05, na.rm=TRUE)
#plots DE
plotMA(res, ylim=c(-9,9))
plotMA(resLFC, ylim=c(-9,9))
# plots counts
d <- plotCounts(dds, gene=which.min(res$padj), intgroup="condition",
returnData=TRUE)
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
# more results
mcols(res)$description
#save data
write.csv(as.data.frame(resOrdered),
file="condition_Serum_vs_BH_results.csv")
save_it <- as.data.frame(resOrdered)
write.csv(as.data.frame(save_it[1]),
file="condition_Serum_vs_BH_results_genes.csv")
save_it[1]
# Create the report from the DESeq2 package,
DESeq2Report(dds = dds, intgroup = "condition")
# Since expression data is
rld <- rlog(dds)
resultsdds <- results(dds)
only_sign_dds_rlog <- subset(resultsdds, padj < 0.05)
#only_sign_dds_rlog <- subset(only_sign_dds_rlog, log2FoldChange < -2)
change_filter <- change_filter <- which(
abs(only_sign_dds_rlog$padj < 0.1) |
abs(only_sign_dds_rlog$padj < 0.1)
)
topVarGenes <- head(order(-rowVars(assay(rld))),20)
#topVarGenes <- topVarGenes[(topVarGenes %in% only_sign_dds_rlog$)]
mat = assay(rld)[ head(order(res$padj),20), ] # select the top 30 genes with the lowest padj
mat = mat - rowMeans(mat) # Subtract the row means from each value
df <- as.data.frame(colData(rld)[,"condition"])
colnames(mat) <- c("BH-1","BH-2","BH-3","Serum-1","Serum-2","Serum-3", "Serum-4")
colnames(df) <- "Condition"
rownames(df) <- colnames(mat)
pheatmap(mat, annotation_col=df)
View(save_it)
View(save_it)
write.csv2(as.data.frame(resOrdered),
file="condition_Serum_vs_BH_results.csv", sep=',')
write.table(as.data.frame(resOrdered),
file="condition_Serum_vs_BH_results.csv", sep=',')
save_it <- as.data.frame(resOrdered)
write.table(as.data.frame(save_it[1]),
file="condition_Serum_vs_BH_results_genes.csv", sep=',')
View(save_it)
write.table(as.data.frame(save_it[1]),
file="condition_Serum_vs_BH_results_genes.csv", row.names=FALSE, sep=',')
write.table(as.data.frame(save_it),
file="condition_Serum_vs_BH_results_genes.csv", row.names=FALSE, sep=',')
write.table(as.data.frame(save_it),
file="condition_Serum_vs_BH_results_genes.csv", row.names=FALSE, sep='\t')
write.table(as.data.frame(save_it[0]),
file="condition_Serum_vs_BH_results_genes.csv", row.names=FALSE, sep='\t')
write.table(as.data.frame(save_it[0]),
file="condition_Serum_vs_BH_results_genes.csv", row.names=TRUE, sep='\t')
write.table(as.data.frame(resOrdered),
file="condition_Serum_vs_BH_results.csv",row.names=TRUE, sep='\t')
save_it <- as.data.frame(resOrdered)
write.table(save_it[0],
file="condition_Serum_vs_BH_results_genes.csv", row.names=TRUE, sep='\t')
View(save_it)
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.05)
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.05)
View(save_it)
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.05 | log2FoldChange > 2 | log2FoldChange < 0.5)
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.05 | log2FoldChange > 2 | log2FoldChange < 0.5)
write.table(save_it,
file="condition_Serum_vs_BH_results.csv",row.names=TRUE, sep='\t')
write.table(save_it[0],
file="condition_Serum_vs_BH_results_genes.csv", row.names=TRUE, sep='\t')
View(save_it)
save_it <- subset(save_it, padj<0.05 | log2FoldChange > 2)
save_it <- subset(save_it, padj<0.05 | 0.5 < log2FoldChange > 2)
save_it <- subset(save_it, padj<0.05 | (0.5 < log2FoldChange > 2))
save_it <- subset(save_it, padj<0.05 | (log2FoldChange > 2 | log2FoldChange < 0.5))
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.05 | (log2FoldChange > 2 | log2FoldChange < 0.5))
save_it <- subset(save_it, padj<0.05 | (log2FoldChange > 2 | log2FoldChange ==0))
save_it <- subset(save_it, padj<0.05 | (log2FoldChange > 2 | log2FoldChange <-10))
save_it <- subset(save_it, padj<0.05 | (log2FoldChange > 2 | log2FoldChange < -10))
save_it <- subset(save_it, padj<0.05 | (log2FoldChange > 2 | log2FoldChange < -2))
View(save_it)
save_it <- as.data.frame(resOrdered)
save_it_up <- subset(save_it, padj<0.05 | log2FoldChange > 2 )
save_it <- as.data.frame(resOrdered)
save_it_up <- subset(save_it, padj<0.05 | log2FoldChange > 2 )
save_it_down <- subset(save_it, padj<0.05 | log2FoldChange < 0.5 )
View(save_it_down)
save_it_up <- subset(save_it, padj<0.05 | log2FoldChange > 2 )
View(save_it_up)
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.05)
save_it_up <- subset(save_it, log2FoldChange > 2 )
save_it_down <- subset(save_it, log2FoldChange < 0.5 )
write.table(save_it_up,
file="genes_up_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_up[0],
file="genes_up_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
write.table(save_it_down,
file="genes_down_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_down[0],
file="genes_down_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
View(save_it_up)
BiocManager::install("regionReport")
install.packages("BiocManager")
biocLite("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("regionReport")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rgraphviz", version = "3.8")
source("https://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rgraphviz", version = "3.8")
biocLite("BiocManager")
install.packages("BiocManager")
source("https://bioconductor.org/biocLite.R")
biocLite("BioSeqClass")
install.packages("BiocManager")
biocLite("BiocManager")
report <- DESeq2Report(dds, 'DESeq2-example', c('condition', 'type'),
outdir = 'DESeq2Report-example')
install.packages("regionReport")
biocLite("regionReport")
install.packages("regionReport")
report <- DESeq2Report(dds, 'DESeq2-example', c('condition', 'type'),
outdir = 'DESeq2Report-example')
# Create the report from the DESeq2 package
DESeq2Report(dds = dds, intgroup = "condition")
biocLite("regionReport")
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.001)
save_it_up <- subset(save_it, log2FoldChange > 2 )
save_it_down <- subset(save_it, log2FoldChange < 0.5 )
write.table(save_it_up,
file="genes_up_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_up[0],
file="genes_up_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
write.table(save_it_down,
file="genes_down_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_down[0],
file="genes_down_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
