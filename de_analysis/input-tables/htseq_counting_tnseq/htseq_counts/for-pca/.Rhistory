report <- DESeq2Report(dds, 'DESeq2-example', c('condition', 'type'),
outdir = 'DESeq2Report-example')
# Plot PCA
rld <- rlogTransformation(dds, blind=TRUE)
new_plot <- function (object, intgroup = "condition", ntop = 500,
returnData = FALSE)
{
rv <- rowVars(assay(object))
select <- order(rv, decreasing = TRUE)[seq_len(min(ntop,
length(rv)))]
pca <- prcomp(t(assay(object)[select, ]))
percentVar <- pca$sdev^2/sum(pca$sdev^2)
if (!all(intgroup %in% names(colData(object)))) {
stop("the argument 'intgroup' should specify columns of colData(dds)")
}
intgroup.df <- as.data.frame(colData(object)[, intgroup,
drop = FALSE])
group <- if (length(intgroup) > 1) {
factor(apply(intgroup.df, 1, paste, collapse = ":"))
}
else {
colData(object)[[intgroup]]
}
d <- data.frame(PC1 = pca$x[, 1], PC2 = pca$x[, 2], group = group,
intgroup.df, name = colnames(object))
if (returnData) {
attr(d, "percentVar") <- percentVar[1:2]
return(d)
}
ggplot(data = d, aes_string(x = "PC1", y = "PC2", color = "group")) +
ylim(-20, 20) +
theme_bw() +
geom_point(size = 10) + xlab(paste0("PC1: ", round(percentVar[1] *
100), "% variance")) + ylab(paste0("PC2: ", round(percentVar[2] *
100), "% variance")) + coord_fixed()
}
new_plot(rld)
# Plot heatmap
rld <- rlog(dds)
resultsdds <- results(dds)
topVarGenes <- head(order(-rowVars(assay(rld))),20)
#topVarGenes <- topVarGenes[(topVarGenes %in% only_sign_dds_rlog$)]
mat = assay(rld)[ head(order(res$padj),20), ] # select the top 30 genes with the lowest padj
mat = mat - rowMeans(mat) # Subtract the row means from each value
df <- as.data.frame(colData(rld)[,"condition"])
colnames(mat) <- c("BH-1","BH-2","BH-3","Serum-1","Serum-2","Serum-3", "Serum-4")
colnames(df) <- "Condition"
rownames(df) <- colnames(mat)
pheatmap(mat, annotation_col=df)
write.table(save_it_up,
file=save_output_directory+"genes_up_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_up[0],
file=save_output_directory+"genes_up_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
write.table(save_it_down,
file=save_output_directory+"genes_down_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_down[0],
file=save_output_directory+"genes_down_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.001)
save_it_up <- subset(save_it, log2FoldChange > 2 )
save_it_down <- subset(save_it, log2FoldChange < 0.5 )
write.table(save_it_up,
file=save_output_directory+"genes_up_in_Serum.csv",row.names=TRUE, sep='\t')
save_output_directory <- '/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/rna-seq/'
write.table(save_it_up,
file=save_output_directory+"genes_up_in_Serum.csv",row.names=TRUE, sep='\t')
save_output_directory
save_output_directory+"genes_up_in_Serum.csv"
save_output_directory+genes_up_in_Serum.csv
write.table(save_it_up,
file=save_output_directory,row.names=TRUE, sep='\t')
write.table(save_it_down,
file=save_output_directory[1:-1]+"genes_down_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_down,
file=save_output_directory[1:-2]+"genes_down_in_Serum.csv",row.names=TRUE, sep='\t')
save_output_directory[1:-2]
save_output_directory[1:0]
save_output_directory[3:0]
save_output_directory[:]
save_output_directory[::]
save_output_directory[]
write.table(save_it_down,
file=save_output_directory[]+"genes_down_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_up,
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/rna-seq/genes_up_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_up[0],
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/rna-seq/genes_up_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
write.table(save_it_down,
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/rna-seq/genes_down_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_down[0],
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/rna-seq/genes_down_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
resOrdered <- res[order(-res$log2FoldChange),]
summary(res)
sum(res$padj < 0.1, na.rm=TRUE)
sum(res$padj < 0.001, na.rm=TRUE)
res05 <- results(dds, alpha=0.001)
summary(res05)
sum(res05$padj < 0.001, na.rm=TRUE)
plotMA(res, ylim=c(-9,9))
plotMA(res05, ylim=c(-9,9))
plotMA(resLFC, ylim=c(-9,9))
plotMA(res05, ylim=c(-9,9))
d <- plotCounts(dds, gene=which.min(res$padj), intgroup="condition",
returnData=TRUE)
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
mcols(res)$description
rld <- rlogTransformation(dds, blind=TRUE)
new_plot <- function (object, intgroup = "condition", ntop = 500,
returnData = FALSE)
{
rv <- rowVars(assay(object))
select <- order(rv, decreasing = TRUE)[seq_len(min(ntop,
length(rv)))]
pca <- prcomp(t(assay(object)[select, ]))
percentVar <- pca$sdev^2/sum(pca$sdev^2)
if (!all(intgroup %in% names(colData(object)))) {
stop("the argument 'intgroup' should specify columns of colData(dds)")
}
intgroup.df <- as.data.frame(colData(object)[, intgroup,
drop = FALSE])
group <- if (length(intgroup) > 1) {
factor(apply(intgroup.df, 1, paste, collapse = ":"))
}
else {
colData(object)[[intgroup]]
}
d <- data.frame(PC1 = pca$x[, 1], PC2 = pca$x[, 2], group = group,
intgroup.df, name = colnames(object))
if (returnData) {
attr(d, "percentVar") <- percentVar[1:2]
return(d)
}
ggplot(data = d, aes_string(x = "PC1", y = "PC2", color = "group")) +
ylim(-20, 20) +
theme_bw() +
geom_point(size = 10) + xlab(paste0("PC1: ", round(percentVar[1] *
100), "% variance")) + ylab(paste0("PC2: ", round(percentVar[2] *
100), "% variance")) + coord_fixed()
}
new_plot(rld)
topVarGenes <- head(order(-rowVars(assay(rld))),20)
mat = assay(rld)[ head(order(res$padj),20), ] # select the top 20 genes with the lowest padj
mat = mat - rowMeans(mat) # Subtract the row means from each value
df <- as.data.frame(colData(rld)[,"condition"])
colnames(mat) <- c("BH-1","BH-2","BH-3","Serum-1","Serum-2","Serum-3", "Serum-4")
View(df)
pheatmap(mat, annotation_col=df)
colnames(mat) <- c("BH-1","BH-2","BH-3","Serum-1","Serum-2","Serum-3")
colnames(df) <- "Condition"
rownames(df) <- colnames(mat)
pheatmap(mat, annotation_col=df)
View(df)
View(df)
colnames(df) <- "Huy"
rownames(df) <- colnames(mat)
pheatmap(mat, annotation_col=df)
colnames(df) <- "Condition"
rownames(df) <- colnames(mat)
pheatmap(mat, annotation_col=df)
resOrdered <- res[order(-res$log2FoldChange),]
summary(res)
sum(res05$padj < 0.001, na.rm=TRUE)
summary(res05)
dds <- dds[, dds$condition %in% c("Serum","BH") ]
dds <- DESeq(dds)
res <- results(dds)
res
res <- results(dds, name="condition_Serum_vs_BH")
res <- results(dds, contrast=c("condition","Serum","BH"))
resOrdered <- res[order(-res$log2FoldChange),]
summary(res)
sum(res$padj < 0.001, na.rm=TRUE)
res05 <- results(dds, alpha=0.001)
summary(res05)
sum(res05$padj < 0.001, na.rm=TRUE)
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.001)
save_it_up <- subset(save_it, log2FoldChange > 2 )
save_it_down <- subset(save_it, log2FoldChange < 0.5 )
write.table(save_it_up,
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/rna-seq/genes_up_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_up[0],
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/rna-seq/genes_up_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
write.table(save_it_down,
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/rna-seq/genes_down_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_down[0],
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/rna-seq/genes_down_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
View(save_it)
directory <- "/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/input-tables/htseq_counting/"
setwd("/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/input-tables/htseq_counting/")
sampleFiles_Serum <- grep("Serum",list.files(directory),value=TRUE)
sampleCondition_Serum <- sub("(.*Serum).*","\\1",sampleFiles_Serum)
sampleTable_Serum <- data.frame(sampleName = sampleFiles_Serum,
fileName = sampleFiles_Serum,
condition = sampleCondition_Serum)
sampleFiles_BH <- grep("BH",list.files(directory),value=TRUE)
sampleCondition_BH <- sub("(.*BH).*","\\1",sampleFiles_BH)
sampleTable_BH <- data.frame(sampleName = sampleFiles_BH,
fileName = sampleFiles_BH,
condition = sampleCondition_BH)
sampleCondition <- c(sampleCondition_Serum, sampleCondition_BH)
sampleTable <- merge(sampleTable_BH, sampleTable_Serum, all=TRUE)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
### Prefiltering
keep <- rowSums(counts(ddsHTSeq)) >= 10
ddsHTSeq <- ddsHTSeq[keep,]
dds <- ddsHTSeq
### Choosing the reference condition
dds$condition <- relevel(dds$condition, ref = "BH")
### DE analysis
dds <- dds[, dds$condition %in% c("Serum","BH") ]
dds <- DESeq(dds)
res <- results(dds)
res
res <- results(dds, name="condition_Serum_vs_BH")
res <- results(dds, contrast=c("condition","Serum","BH"))
### Plot PCA
rld <- rlogTransformation(dds, blind=TRUE)
new_plot <- function (object, intgroup = "condition", ntop = 500,
returnData = FALSE)
{
rv <- rowVars(assay(object))
select <- order(rv, decreasing = TRUE)[seq_len(min(ntop,
length(rv)))]
pca <- prcomp(t(assay(object)[select, ]))
percentVar <- pca$sdev^2/sum(pca$sdev^2)
if (!all(intgroup %in% names(colData(object)))) {
stop("the argument 'intgroup' should specify columns of colData(dds)")
}
intgroup.df <- as.data.frame(colData(object)[, intgroup,
drop = FALSE])
group <- if (length(intgroup) > 1) {
factor(apply(intgroup.df, 1, paste, collapse = ":"))
}
else {
colData(object)[[intgroup]]
}
d <- data.frame(PC1 = pca$x[, 1], PC2 = pca$x[, 2], group = group,
intgroup.df, name = colnames(object))
if (returnData) {
attr(d, "percentVar") <- percentVar[1:2]
return(d)
}
ggplot(data = d, aes_string(x = "PC1", y = "PC2", color = "group")) +
ylim(-20, 20) +
theme_bw() +
geom_point(size = 10) + xlab(paste0("PC1: ", round(percentVar[1] *
100), "% variance")) + ylab(paste0("PC2: ", round(percentVar[2] *
100), "% variance")) + coord_fixed()
}
new_plot(rld)
### Plot heatmap with variance of LogFoldChange
rld <- rlog(dds)
resultsdds <- results(dds)
topVarGenes <- head(order(-rowVars(assay(rld))),20)
mat = assay(rld)[ head(order(res$padj),20), ] # select the top 20 genes with the lowest padj
mat = mat - rowMeans(mat) # Subtract the row means from each value
df <- as.data.frame(colData(rld)[,"condition"])
colnames(mat) <- c("BH-1","BH-2","BH-3","Serum-1","Serum-2","Serum-3")
colnames(df) <- "Condition"
rownames(df) <- colnames(mat)
pheatmap(mat, annotation_col=df)
### plots DE with MA
summary(res)
sum(res$padj < 0.001, na.rm=TRUE)
res05 <- results(dds, alpha=0.001)
plotMA(res05, ylim=c(-9,9))
### Save data
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.001)
save_it_up <- subset(save_it, log2FoldChange > 2 )
save_it_down <- subset(save_it, log2FoldChange < 0.5 )
View(save_it)
save_it <- as.data.frame(resOrdered)
resLFC <- lfcShrink(dds, coef="condition_Serum_vs_BH", type="apeglm")
resOrdered <- resLFC[order(resLFC$padj),]
resOrdered
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.001)
save_it_up <- subset(save_it, log2FoldChange > 2 )
save_it_down <- subset(save_it, log2FoldChange < 0.5 )
# Log fold change shrinkage for visualization and ranking
resultsNames(dds)
### Load libraries
source("https://bioconductor.org/biocLite.R")
library(DESeq2)
library(apeglm)
library(pheatmap)
library(ggplot2)
### Load data
directory <- "/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/input-tables/htseq_counting_tnseq/htseq_counts/for-pca/"
setwd("/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/input-tables/htseq_counting_tnseq/htseq_counts/for-pca/")
sampleFiles_Serum <- grep("Serum",list.files(directory),value=TRUE)
sampleCondition_Serum <- sub("(.*Serum).*","\\1",sampleFiles_Serum)
sampleTable_Serum <- data.frame(sampleName = sampleFiles_Serum,
fileName = sampleFiles_Serum,
condition = sampleCondition_Serum)
sampleFiles_BH <- grep("BH",list.files(directory),value=TRUE)
sampleCondition_BH <- sub("(.*BH).*","\\1",sampleFiles_BH)
sampleTable_BH <- data.frame(sampleName = sampleFiles_BH,
fileName = sampleFiles_BH,
condition = sampleCondition_BH)
sampleCondition <- c(sampleCondition_Serum, sampleCondition_BH)
sampleTable <- merge(sampleTable_BH, sampleTable_Serum, all=TRUE)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
### Prefiltering
keep <- rowSums(counts(ddsHTSeq)) >= 10
ddsHTSeq <- ddsHTSeq[keep,]
dds <- ddsHTSeq
### Choosing the reference condition
dds$condition <- relevel(dds$condition, ref = "BH")
### DE analysis
dds <- dds[, dds$condition %in% c("Serum","BH") ]
dds <- DESeq(dds)
res <- results(dds)
res
res <- results(dds, name="condition_Serum_vs_BH")
res <- results(dds, contrast=c("condition","Serum","BH"))
### Log fold change shrinkage for visualization and ranking
resLFC <- lfcShrink(dds, coef="condition_Serum_vs_BH", type="apeglm")
resOrdered <- resLFC[order(resLFC$padj),]
resOrdered
res05 <- results(dds, alpha=0.05)
summary(res05)
sum(res05$padj < 0.05, na.rm=TRUE)
#plots DE
plotMA(res, ylim=c(-9,9))
plotMA(res05, ylim=c(-10,10), main='MA plot', alpha=0.1)
plotMA(res05, ylim=c(-10,10), main='MA plot', alpha=0.05)
d <- plotCounts(dds, gene=which.min(res$padj), intgroup="condition",
returnData=TRUE)
library("ggplot2")
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))+
theme(
panel.background = element_rect(fill = NA),
panel.grid.major = element_line(colour = "grey50"),
panel.ontop = TRUE
)
# PCA on DE data
rld <- rlogTransformation(dds, blind=TRUE)
new_plot <- function (object, intgroup = "condition", ntop = 500,
returnData = FALSE)
{
rv <- rowVars(assay(object))
select <- order(rv, decreasing = TRUE)[seq_len(min(ntop,
length(rv)))]
pca <- prcomp(t(assay(object)[select, ]))
percentVar <- pca$sdev^2/sum(pca$sdev^2)
if (!all(intgroup %in% names(colData(object)))) {
stop("the argument 'intgroup' should specify columns of colData(dds)")
}
intgroup.df <- as.data.frame(colData(object)[, intgroup,
drop = FALSE])
group <- if (length(intgroup) > 1) {
factor(apply(intgroup.df, 1, paste, collapse = ":"))
}
else {
colData(object)[[intgroup]]
}
d <- data.frame(PC1 = pca$x[, 1], PC2 = pca$x[, 2], group = group,
intgroup.df, name = colnames(object))
if (returnData) {
attr(d, "percentVar") <- percentVar[1:2]
return(d)
}
ggplot(data = d, aes_string(x = "PC1", y = "PC2", color = "group")) +
ylim(-20, 20) +
theme_bw() +
geom_point(size = 5) + xlab(paste0("PC1: ", round(percentVar[1] *
100), "% variance")) + ylab(paste0("PC2: ", round(percentVar[2] *
100), "% variance")) + coord_fixed()
}
new_plot(rld)
rld <- rlogTransformation(dds, blind=TRUE)
new_plot <- function (object, intgroup = "condition", ntop = 500,
returnData = FALSE)
{
rv <- rowVars(assay(object))
select <- order(rv, decreasing = TRUE)[seq_len(min(ntop,
length(rv)))]
pca <- prcomp(t(assay(object)[select, ]))
percentVar <- pca$sdev^2/sum(pca$sdev^2)
if (!all(intgroup %in% names(colData(object)))) {
stop("the argument 'intgroup' should specify columns of colData(dds)")
}
intgroup.df <- as.data.frame(colData(object)[, intgroup,
drop = FALSE])
group <- if (length(intgroup) > 1) {
factor(apply(intgroup.df, 1, paste, collapse = ":"))
}
else {
colData(object)[[intgroup]]
}
d <- data.frame(PC1 = pca$x[, 1], PC2 = pca$x[, 2], group = group,
intgroup.df, name = colnames(object))
if (returnData) {
attr(d, "percentVar") <- percentVar[1:2]
return(d)
}
ggplot(data = d, aes_string(x = "PC1", y = "PC2", color = "group")) +
ylim(-10, 10) +
theme_bw() +
geom_point(size = 5) + xlab(paste0("PC1: ", round(percentVar[1] *
100), "% variance")) + ylab(paste0("PC2: ", round(percentVar[2] *
100), "% variance")) + coord_fixed()
}
new_plot(rld)
rld <- rlogTransformation(dds, blind=TRUE)
new_plot <- function (object, intgroup = "condition", ntop = 500,
returnData = FALSE)
{
rv <- rowVars(assay(object))
select <- order(rv, decreasing = TRUE)[seq_len(min(ntop,
length(rv)))]
pca <- prcomp(t(assay(object)[select, ]))
percentVar <- pca$sdev^2/sum(pca$sdev^2)
if (!all(intgroup %in% names(colData(object)))) {
stop("the argument 'intgroup' should specify columns of colData(dds)")
}
intgroup.df <- as.data.frame(colData(object)[, intgroup,
drop = FALSE])
group <- if (length(intgroup) > 1) {
factor(apply(intgroup.df, 1, paste, collapse = ":"))
}
else {
colData(object)[[intgroup]]
}
d <- data.frame(PC1 = pca$x[, 1], PC2 = pca$x[, 2], group = group,
intgroup.df, name = colnames(object))
if (returnData) {
attr(d, "percentVar") <- percentVar[1:2]
return(d)
}
ggplot(data = d, aes_string(x = "PC1", y = "PC2", color = "group")) +
ylim(-7, 7) +
theme_bw() +
geom_point(size = 5) + xlab(paste0("PC1: ", round(percentVar[1] *
100), "% variance")) + ylab(paste0("PC2: ", round(percentVar[2] *
100), "% variance")) + coord_fixed()
}
new_plot(rld)
counts_table = counts( dds, normalized=TRUE )
filtered_norm_counts<-counts_table[!rowSums(counts_table==0)>=7, ]
filtered_norm_counts<-as.data.frame(filtered_norm_counts)
GeneID<-rownames(filtered_norm_counts)
filtered_norm_counts<-cbind(filtered_norm_counts,GeneID)
dim(filtered_norm_counts)
head(filtered_norm_counts)
res_ordered<-res[order(res$padj),]
GeneID<-rownames(res_ordered)
res_ordered<-as.data.frame(res_ordered)
res_genes<-cbind(res_ordered,GeneID)
dim(res_genes)
head(res_genes)
dim(res_genes)
res_genes_merged <- merge(res_genes,filtered_norm_counts,by=unique("GeneID"))
dim(res_genes_merged)
head(res_genes_merged)
res_ordered<-res_genes_merged[order(res_genes_merged$padj),]
plot(log2(res_ordered$baseMean), res_ordered$log2FoldChange, col=ifelse(res_ordered$padj < 0.05,
"red","gray67"),main="MA plot (padj<0.05)", xlab = "Mean of normalized counts (log2)", ylab = "Log fold change", xlim=c(2,18),pch=20,cex=1,ylim=c(-7,5.8))
abline(h=c(-2,2), col="blue")
resSig <- subset(res_ordered, padj<0.05)
resSig = resSig[resSig$log2FoldChange > 2 | resSig$log2FoldChange < -2,]
genes<-resSig$GeneID
mygenes <- resSig[,]
baseMean_mygenes <- mygenes[,"baseMean"]
log2FoldChange_mygenes <- mygenes[,"log2FoldChange"]
text(log2(baseMean_mygenes),log2FoldChange_mygenes,labels=genes,pos=1,cex=0.80, offset = 0.5,adj = c(0,0))
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.05)
save_it_up <- subset(save_it, log2FoldChange > 2 )
save_it_down <- subset(save_it, log2FoldChange < 2 )
write.table(save_it_up,
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/tn-seq/genes_up_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_up[0],
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/tn-seq/genes_up_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
write.table(save_it_down,
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/tn-seq/genes_down_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_down[0],
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/tn-seq/genes_down_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
save_it <- as.data.frame(resOrdered)
save_it <- subset(save_it, padj<0.05)
save_it_up <- subset(save_it, log2FoldChange > 2 )
save_it_down <- subset(save_it, log2FoldChange < 2 )
write.table(save_it_up,
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/tn-seq/genes_up_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_up[0],
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/tn-seq/genes_up_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
write.table(save_it_down,
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/tn-seq/genes_down_in_Serum.csv",row.names=TRUE, sep='\t')
write.table(save_it_down[0],
file="/home/erik/sweden/courses/2nd_semester/Genome_Analysis/ga_course/de_analysis/tn-seq/genes_down_in_Serum_gene_names.csv", row.names=TRUE, sep='\t')
### Heat Map code
rld <- rlog(dds)
resultsdds <- results(dds)
topVarGenes <- head(order(-rowVars(assay(rld))),20)
mat = assay(rld)[ head(order(res$padj),20), ] # select the top 30 genes with the lowest padj
mat = mat - rowMeans(mat) # Subtract the row means from each value
df <- as.data.frame(colData(rld)[,"condition"])
colnames(mat) <- c("BH-1","BH-2","BH-3","Serum-1","Serum-2","Serum-3","Serum-4")
colnames(df) <- "Condition"
rownames(df) <- colnames(mat)
pheatmap(mat, annotation_col=df)
